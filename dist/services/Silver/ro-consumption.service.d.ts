import { RoConsumptionDocument } from '../../entities/Silver/roConsumption';
import { RoOrderDocument } from '../../entities/Silver/roOrder';
import { CgOrderDocument } from '../../entities/Silver/cgOrder';
import { RoInventoryDocument } from '../../entities/Silver/roInventory';
import { CgInventoryDocument } from '../../entities/Silver/cgInventory';
import { SilverProductDocument } from '../../entities/Silver/silverProductMaster';
import { RoMasterDocument } from '../../entities/Silver/roMaster';
import { UserDocument } from '../../entities/users.entity';
import { Model } from 'mongoose';
import { AddRoConsumptionDto, CreateRoConsumptionDto, ImportRoConsumptionDto, UpdateRoConsumptionDto, updateStatusRoConsumptionDto } from '../../Silver/ro-consumption/dto/request-roConsumption.dto';
import { GetRoConsumptionInfoDto } from '../../Silver/ro-consumption/dto/response-roConsumption.dto';
import { Request } from 'express';
import { FilterPaginationRoConsumptionDto } from 'src/dto/ro-consumption.dto';
export declare class RoConsumptionService {
    private cgInventoryModel;
    private roInventoryModel;
    private roConsumptionModel;
    private silverProductModel;
    private roOrderModel;
    private cgOrderModel;
    private userModel;
    private roMasterModel;
    constructor(cgInventoryModel: Model<CgInventoryDocument>, roInventoryModel: Model<RoInventoryDocument>, roConsumptionModel: Model<RoConsumptionDocument>, silverProductModel: Model<SilverProductDocument>, roOrderModel: Model<RoOrderDocument>, cgOrderModel: Model<CgOrderDocument>, userModel: Model<UserDocument>, roMasterModel: Model<RoMasterDocument>);
    changeUniqueNumber(): Promise<void>;
    changeCgUniqueNumber(): Promise<void>;
    getAvgWeeklyConsumptionLY4M(roId: any, productId: any): Promise<number>;
    getAvgWeeklyConsumptionL12(roId: any, productId: any): Promise<number>;
    getAvgWeeklyConsumptionL3(roId: any, productId: any): Promise<number>;
    getCgOpenOrder(productId: any): Promise<number>;
    calculateRoSigma(productId: any): Promise<number>;
    sumOfQualifiedDemand(productId: any): Promise<number>;
    createCgInventory(productId: any, qualifiedDemands: any, createdBy: any): Promise<void>;
    updateCgInventory(productId: any, qualifiedDemandData: any, createdBy: any): Promise<void>;
    getRecommendationOrder(roId: any, productId: any): Promise<number>;
    getOpenOrder(roId: any, productId: any): Promise<number>;
    getAvgWeeklyConsumption(roId: any, productId: any): Promise<number>;
    createConsumption(createConsumptionDto: CreateRoConsumptionDto, req: Request): Promise<GetRoConsumptionInfoDto>;
    getAllConsumption(paginationDto: FilterPaginationRoConsumptionDto, req: Request): Promise<any>;
    getConsumptionInfo(id: string): Promise<GetRoConsumptionInfoDto>;
    UpdateConsumption(updateConsumptionDto: UpdateRoConsumptionDto, req: Request): Promise<any>;
    importConsumption(req: Request, createConsumptionDto: ImportRoConsumptionDto[]): Promise<GetRoConsumptionInfoDto>;
    updateConsumptionStatus(id: string, updateStatusConsumptionDto: updateStatusRoConsumptionDto): Promise<updateStatusRoConsumptionDto>;
    getConsumptionDropDown(req: Request): Promise<any>;
    getRoInventoryList(req: Request, addRoConsumptionDto: AddRoConsumptionDto): Promise<any>;
}
