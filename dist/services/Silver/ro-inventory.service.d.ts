import { Request } from 'express';
import { Model } from 'mongoose';
import { UserDocument } from '../../entities/users.entity';
import { RoOrderDocument } from '../../entities/Silver/roOrder';
import { CgOrderDocument } from '../../entities/Silver/cgOrder';
import { SilverProductDocument } from '../../entities/Silver/silverProductMaster';
import { RoInventoryDocument } from '../../entities/Silver/roInventory';
import { CgInventoryDocument } from '../../entities/Silver/cgInventory';
import { RoConsumptionDocument } from '../../entities/Silver/roConsumption';
import { CgConsumptionDocument } from '../../entities/Silver/cgConsumption';
import { CgGrowthFactorDocument } from '../../entities/Silver/cggrowthFactorInfo';
import { RoMasterDocument } from '../../entities/Silver/roMaster';
import { SearchDto } from 'src/dto/pagination-dto';
import { GetRoInventoryInfoDto } from '../../Silver/ro-inventory/dto/response-roInventory.dto';
import { AddRoIdInfo, ChangeTogDto, CreateRoInventoryDto, FilterPaginationRoInventoryDto, GetDashBoardRoInventoryInfo, ImportRoInventoryAndUpdateStockDto, ImportRoInventoryDto, UpdateRoInventoryDto, UpdateStatusRoInventoryDto, UpdateTogToggleDto, ViewotherRoInventoryDto } from '../../Silver/ro-inventory/dto/request-roInventroy.dto';
export declare class RoInventoryService {
    private userModel;
    private roInventoryModel;
    private cgInventoryModel;
    private roConsumptionModel;
    private cgConsumptionModel;
    private silverProductModel;
    private roOrderModel;
    private cgOrderModel;
    private roMasterModel;
    private cgGrowthFactorModel;
    constructor(userModel: Model<UserDocument>, roInventoryModel: Model<RoInventoryDocument>, cgInventoryModel: Model<CgInventoryDocument>, roConsumptionModel: Model<RoConsumptionDocument>, cgConsumptionModel: Model<CgConsumptionDocument>, silverProductModel: Model<SilverProductDocument>, roOrderModel: Model<RoOrderDocument>, cgOrderModel: Model<CgOrderDocument>, roMasterModel: Model<RoMasterDocument>, cgGrowthFactorModel: Model<CgGrowthFactorDocument>);
    UpdateRoInventory(togData: any, productId: any, roId: any): Promise<void>;
    calculateRoSigma(productId: any): Promise<number>;
    sumOfQualifiedDemand(productId: any): Promise<number>;
    getCgOpenOrder(productId: any): Promise<number>;
    getAvgWeeklyCgConsumption(productId: any): Promise<number>;
    updateCgData(authInfo: any): Promise<void>;
    createCgInventory(productId: any, qualifiedDemand: any, createdBy: any): Promise<void>;
    updateCgInventory(productId: any, qualifiedDemandData: any, createdBy: any): Promise<void>;
    getAvgWeeklyConsumptionLY4M(roId: any, productId: any): Promise<number>;
    getAvgWeeklyConsumptionL12(roId: any, productId: any): Promise<number>;
    getAvgWeeklyConsumptionL3(roId: any, productId: any): Promise<number>;
    getAvgWeeklyConsumptionByInventory(inventoryId: any): Promise<number>;
    generateUniqueNumber(): Promise<any>;
    changeUniqueNumber(): Promise<void>;
    getOpenOrder(roId: any, productId: any): Promise<number>;
    createInventory(createInventoryDto: CreateRoInventoryDto, req: Request): Promise<GetRoInventoryInfoDto>;
    getAllInventory(paginationDto: FilterPaginationRoInventoryDto, req: Request): Promise<any>;
    getInventoryInfo(id: string): Promise<any>;
    updateInventoryStatus(id: string, updateStatusInventoryDto: UpdateStatusRoInventoryDto): Promise<UpdateStatusRoInventoryDto>;
    changeTog(id: string, changeTogDto: ChangeTogDto): Promise<any>;
    UpdateInventory(id: string, updateInventoryDto: UpdateRoInventoryDto, req: Request): Promise<void>;
    getDashBoardInventoryInfo(getDashBoardInventoryInfo: GetDashBoardRoInventoryInfo, req: Request): Promise<any>;
    getInventoryDropDown(req: Request, addRoIdInfo: AddRoIdInfo): Promise<any>;
    importInventory(createInventoryDto: ImportRoInventoryDto[], req: Request): Promise<any>;
    importInventoryAndUpdateStock(createInventoryDto: ImportRoInventoryAndUpdateStockDto[], req: Request): Promise<any>;
    getInventoryMoreInfo(viewotherInventoryDto: ViewotherRoInventoryDto): Promise<any>;
    getProductDropDown(searchDto: SearchDto, req: Request): Promise<any>;
    UpdateTogToggle(id: string, updateTogToggleDto: UpdateTogToggleDto, req: Request): Promise<void>;
    UpdateTogRecommendation(): Promise<void>;
}
